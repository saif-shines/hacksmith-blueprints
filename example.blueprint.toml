# Hacksmith Blueprint: Generic Product Onboarding
# Authoring notes:
# - Keep this file product-agnostic; fill in provider-specific URLs and copy.
# - You can safely remove sections you don't need. Unknown keys are ignored by older CLIs.
# - Multi-line instructional text supports TOML multi-line strings (""" ... """).

schema_version = "0.1.0"
smith="saif-shines/hacksmith-blueprints"
description = "Example blueprint for onboarding a user to Scalekit for SSO"

# Optional preview for human-friendly summary
[preview]
enabled = true
title = "Onboard to Scalekit for SSO"
estimated_time = "60s"
steps = [
  "Create account or login",
  "Capture identifiers and API credentials",
  "Configure redirect/callback",
  "Install SDK or generate integration prompt"
]

# Variables captured during the flow. Keep names simple and reusable across products.
[variables.environment_id]
description = "Environment identifier from dashboard (e.g., env_123456)"
required = true
sensitive = false
validation = "^env_[0-9]+$"

[variables.environment_url]
description = "Environment base URL (from API settings)"
required = true
sensitive = false

[variables.client_id]
description = "Client ID from API credentials"
required = true
sensitive = false

[variables.client_secret]
description = "Client Secret from API credentials"
required = true
sensitive = true

# Product context and references (docs, samples, API specs)
[context.documentation]
primary_docs = "https://docs.example.com"
quickstart_guide = "https://docs.example.com/quickstart"
api_reference = "https://docs.example.com/api"
sso_guide = "https://docs.example.com/sso"

[context.community]
discord = "https://discord.gg/example"
support_email = "support@example.com"

[context.github_samples]
main_repo = "https://github.com/example/product"
examples_repo = "https://github.com/example/examples"
sample_apps = ["https://github.com/example/sample-app-1"]

[context.swagger_spec]
api_spec_url = "https://api.example.com/openapi.json"
interactive_docs = "https://api.example.com/docs"
postman_collection = "https://api.example.com/postman.json"

# Reusable URL pieces for templating
[slugs]
base_url = "https://app.scalekit.cloud"

[slugs.static]
login="https://auth.scalekit.cloud/a/auth/login"
signup="https://auth.scalekit.cloud/a/auth/signup"

[slugs.dynamic]
dashboard = "/ws/environments/{{ environment_id }}/quick-start"
api_credentials = "/ws/environments/{{ environment_id }}/settings/api-credentials"
auth_redirects = "/ws/environments/{{ environment_id }}/authentication/redirects"

# AI agent configuration for generating mission brief
[agent]
prompt_template = """
You are an expert developer assistant specializing in seamless integration of Single Sign-On (SSO) with Scalekit across diverse backend environments. Your mission is to help integrate Scalekit SSO into an existing project while strictly adhering to the project’s architectural patterns, language ecosystem, security best practices, and coding conventions.

### Core Responsibilities

- Thoroughly analyze the existing codebase for:
  - Web framework and language
  - Authentication and session management approaches
  - File and folder structure
  - Naming conventions and environment variable handling
  - Middleware usage and user model patterns
  - Error handling and logging practices
- Request clarifications proactively if necessary context is missing (e.g., backend framework, session strategy, SDK preference).
- Generate complete backend Scalekit SSO implementation code, including:
  - Client initialization
  - Login route (authorization URL generation, managing connection identifiers)
  - Callback route (authorization code processing, user identity retrieval, session creation)
- Tailor all generated code to fit the existing project conventions regarding:
  - Route and middleware organization
  - Error handling flows
  - Logging practices
  - Environment variable access patterns
- Enforce robust security practices in all code:
  - CSRF protection via state parameters
  - Secure, HttpOnly cookie or session management
  - Comprehensive token validation
  - Redirect URI verification
- Provide clear guidance for:
  - SDK installation tailored to project language/framework
  - Environment variable setup with language-specific instructions
  - Next steps for Scalekit dashboard configuration and project setup
  - Testing using Scalekit’s IdP simulator tools
- Summarize all instructions and generated code in well-structured, clearly labeled sections, optimized for straightforward developer adoption.

### Integration Workflow

1. **Initial Codebase Analysis or Information Gathering:**
   Assess or inquire about:
   - Backend framework and version (e.g., Express.js, FastAPI, Django, Spring Boot)
   - Authentication/session management approach
   - Environment/config management style
   - Error handling and logging patterns
   - Naming conventions and file organization
   - Existing middleware or user model arrangements

2. **SDK Language and Framework Clarification:**
   Ask questions like:
   - "What backend language and framework are you using?"
   - "How is your current session management configured?"

3. **Present SDK Installation Instructions:**
   Provide targeted installation commands for the detected or specified backend language (Node.js, Python, Go, Java).

4. **Detail Required Scalekit Environment Variables:**
   List environment variables precisely, contextualized per language and framework.

5. **Generate Deliverables in the Following Order:**
   - **Analysis Summary:** Concise overview of detected technologies and patterns
   - **Installation Commands:** SDK install steps
   - **Environment Variable Setup:** Configuration instructions tailored to the project
   - **SSO Implementation Code:**
     - Client setup
     - Login route
     - Callback route
     - Conforming fully to existing codebase conventions
   - **Integration Notes:** Explanation of how new code fits within existing architecture
   - **Testing Instructions:** Using Scalekit’s IdP simulator and test flows
   - **Next Steps:** Dashboard config and any remaining setup tasks

6. **Enforce Security Best Practices Throughout:**
   - HttpOnly and Secure cookie/session flags
   - Anti-CSRF state parameter usage
   - Proper validation of tokens and error conditions
   - Strict redirect URI safety checks

7. **Output Format:** Use explicit labeled sections for clarity:
   1. Analysis Summary
   2. Installation Commands
   3. Environment Setup
   4. Implementation Code
   5. Integration Notes
   6. Testing Instructions
   7. Next Steps

8. **Reference Documentation Links Within Responses:**
   - [Scalekit SSO Quickstart](https://docs.scalekit.com/sso/quickstart/)
   - [Scalekit API Reference](https://docs.scalekit.com/apis)
   - [Scalekit SDK Documentation](https://docs.scalekit.com/dev-kit)

### Suggested Clarifying Questions (if needed):

- What backend framework and version is your project using?
- How is authentication and session management currently implemented?
- What is your environment variable/configuration management approach?
- Are there any specific file or route organization standards to follow?
- Should the SSO integration interact with existing middleware or custom user models?

Begin by analyzing the current project codebase or requesting any missing details. Then deliver outputs in the defined sections above, ensuring all code follows the existing codebase’s architectural and stylistic conventions and Scalekit’s secure SSO integration patterns.
"""

# --- Proposed step protocol (forward-compatible). Current CLI will parse this
# --- structure but may not yet execute steps. It is safe to leave here.

[[flows]]
id = "scalekit"
title = "Onboard onto Scalekit"

# 1) Welcome / overview
[[flows.steps]]
type = "info"
title = "Welcome to Scalekit!"
markdown = """
You are going to get ready to use Scalekit for integrating SSO into your applications.
"""

[[flows.steps]]
type = "choice"
title = "Do you have Scalekit account?"
markdown = """
Also, make sure you are signed in to Scalekit in your current browser session.
- Yes: Takes you to login page
- No: Takes you to signup page
- Continue: Takes you to dashboard (browser session)
"""
save_to = "has_scalekit_account"
options = ["Yes", "No", "Continue"]

[[flows.steps]]
type = "navigate"
title = "Sign up for Scalekit"
when = "has_scalekit_account == 'No'"
url = "{{ slugs.static.signup }}"
instructions = [
  "Complete the signup form",
  "Verify your email",
  "Continue to access your dashboard"
]

[[flows.steps]]
type = "navigate"
title = "Log in to Scalekit"
when = "has_scalekit_account == 'Yes'"
url = "{{ slugs.static.login }}"
instructions = [
  "Enter your email",
  "Choose your auth method to login",
  "Continue to access your dashboard"
]

[[flows.steps]]
type = "input"
title = "Paste Environment ID"
markdown = """
Locate your Environment ID on the dashboard in browser address bar, and copy it (e.g., env_123...)
"""
save_to = "environment_id"
validate.pattern = "^env_[0-9]+$"
validate.message = "Must look like env_123456..."

# 4) Capture API credentials
[[flows.steps]]
type = "navigate"
title = "Open API credentials"
url = "{{ slugs.base_url }}{{ slugs.dynamic.api_credentials }}"
instructions = [
  "Copy Client ID, Client Secret, and Environment URL"
]

[[flows.steps]]
type = "input"
title = "Paste API credentials"
# Multiple inputs captured in a single step
[[flows.steps.inputs]]
name = "client_id"
sensitive = false

[[flows.steps.inputs]]
name = "client_secret"
sensitive = true

[[flows.steps.inputs]]
name = "environment_url"
sensitive = false

[[flows.steps]]
type = "info"
title = "Redirect Endpoint"
markdown = """
You app should expose a redirect endpoint, for scalekit to send your app user information. Read more about it [here](https://docs.scalekit.com).
Hacksmith will help you implement it based on your current project, we let you decide what slug to this redirect endpoint to be.
"""

# 5) Configure redirect URL
[[flows.steps]]
type = "navigate"
title = "Open Authentication Redirects"
url = "{{ slugs.base_url }}{{ slugs.dynamic.auth_redirects }}"
instructions = [
  "Enter the chosen redirect URL for your app (e.g., http://localhost:3000{{ auth.callback_path }})",
  "Click Add to register it"
]
